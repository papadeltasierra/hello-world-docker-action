# Action to install the Telink Zigbee SDK.
#
# TODO:
# - Hard-code more paths since we cannot guarentee anything if things move!
name: 'Install Telink Zigbee SDK'
description: 'Install the Zigbee SDK required to build Telink tlsr825x projects'
inputs:
  directory:
    description: 'Directory into which to install the Zigbee SDK'
    default: 'c:\telink\zigbee_sdk'
  # 'env' is not allowed in an action so usr faked inputs starting with underscore.
  _uri:
    description: URL from which to download the Zigbee SDK.
    default: "http://wiki.telink-semi.cn/tools_and_sdk/Zigbee/Zigbee_SDK.zip"
  _zip:
    description: Filename for downloaded ZIPfile.
    default: Zigbee_SDK.zip
  _hash:
    description: Expected sha256 hash of the downloaded ZIPfile.
    default: "33206990B4443565D5D05CB2737235BA3A56D91567714387975212D57EB01583"

runs:
  using: "composite"
  steps:
    # Create the required directories.
    - name: Create target directory
      shell: pwsh
      run: |
        if (!(Test-Path ${{ inputs.directory }} -PathType container)) {
          New-Item -Path ${{ inputs.directory }} -ItemType "directory"
        }

    # Download and expand the SDK.
    - name: Download the Zigbee SDK
      shell: pwsh
      run: Invoke-RestMethod -Method GET -FollowRelLink -Uri "${{ inputs._uri }}" -OutFile "$env:TEMP\${{ inputs._zip }}"

    # Validate that the Zigbee SDK has not changed.
    - name: Check SDK hash/version
      shell: pwsh
      run: |
        $Hash=$(Get-FileHash -Path "$env:TEMP\${{ inputs._zip }}" -Algorithm sha256)
        if ($Hash.hash -ne "${{ inputs._hash }}")
        {
          Write-Warning "Zigbee SDK hash has changed implying Zigbee SDK update!"
          Write-Warning "Expected sha256: ${{ inputs._hash }}"
          Write-Warning "Actual sha256:   $(Out-String -InputObject $Hash.hash)"
        }

    - name: Unzip the SDK
      shell: pwsh
      run: Expand-Archive -Path "$env:TEMP\${{ inputs._zip }}" -DestinationPath "${{ inputs.directory }}"

    - name: Delete SDK Zipfile
      shell: pwsh
      run: Remove-Item -Path "$env:TEMP\${{ inputs._zip }}"

    - name: List SDK
      shell: pwsh
      run: Get-ChildItem -Path "${{ inputs.directory }}"
