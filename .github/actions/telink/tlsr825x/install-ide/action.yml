# Action to install the Telink Eclipse based IDE.
#
# TODO:
# - Hard-code more paths since we cannot guarentee anything if things move!
name: 'Install Telink IDE'
description: 'Install the Eclipse based IDE required to build Telink tlsr825x projects'
inputs:
  directory:
    description: 'Directory into which to install the IDE'
    default: 'c:\telink\ide'
  # Actions should not use "env" so create fake inputs prefixed with underscore.
  _uri:
    description: URI from which to download the IDE.
    default: "https://www.dropbox.com/s/ths9rev0tvhhl96/Telink_IDE.zip?dl=1"
  _zip:
    description: ZIPfile name to give the downloaded file.
    default: Telink_IDE.zip
  _hash:
    description: Expected sha256 hash of the IDE ZIPfile.
    default: "D47595AAFAE1B711A04DC83BAB08467160EA2A3559EA976576C2F8A44F47BF1F"

runs:
  using: "composite"
  steps:
    # Create the required directories.
    - name: Create target directoryTLSR825x base directory
      shell: pwsh
      run: |
        if (!(Test-Path ${{ inputs.directory }} -PathType container)) {
          New-Item -Path ${{ inputs.directory }} -ItemType "directory"
        }

    # Download and expand the IDE
    - name: Download the IDE
      shell: pwsh
      run: Invoke-RestMethod -Method GET -FollowRelLink -Uri "${{ inputs._uri }}" -OutFile "$env:TEMP\${{ inputs._zip }}"

    # Validate that the IDE has not changed.
    - name: Check IDE hash/version
      shell: pwsh
      run: |
        $Hash=$(Get-FileHash -Path "$env:TEMP\${{ inputs._zip }}" -Algorithm sha256)
        if ($Hash.hash -ne "${{ inputs._hash }}")
        {
          Write-Warning "IDE hash has changed implying IDE update!"
          Write-Warning "Expected sha256: ${env:IDE_HASH}"
          Write-Warning "Actual sha256:   $(Out-String -InputObject $Hash.hash)"
        }

    # Note that the IDE has a path "IDE" baked into it.
    - name: Unzip the IDE
      shell: pwsh
      run: Expand-Archive -Path "$env:TEMP\${{ inputs._zip }}" -DestinationPath "$env:TEMP"
    - name: Delete IDE Zipfile
      shell: pwsh
      run: Remove-Item -Path "$env:TEMP\${{ inputs._zip }}"

    - name: List IDE
      shell: pwsh
      run: Get-ChildItem -Path "$env:TEMP\IDE" -Recurse

    - name: Report the IDE version and spot multiple unexpected EXEs.
      shell: pwsh
      run: |
        $exes=Get-ChildItem -Path $env:TEMP\IDE\telink*.exe | Select FullName
        if ($exes.count > 1) {
          Write-Error "Multiple executables were found that could be IDE installers" -ErrorAction:Continue
          Get-ChildItem -Path "$env:TEMP\IDE\telink*.exe" | Select FullName
          exit 1
        }
        $version="unknown"
        if ($exes[0].FullName -match '(v\d+\.\d+\.\d+)') {
          $version=$Matches[0]
        }
        Write-Information -Message "Telink IDE version: ${version}" -InformationAction:Continue

    # Note the strange single-quote syntax required for the call operator.
    - name: Install the IDE
      shell: pwsh
      run: |
        Get-ChildItem -Path "$env:TEMP\IDE\telink*.exe"
        $exes=Get-ChildItem -Path "$env:TEMP\IDE\telink*.exe"
        # Run the installer, waiting for it to complte, redirecting output etc.
        $proc=Start-Process `
          -FilePath $exes[0].FullName `
          -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /DIR=""${{ inputs.directory }}"" /NOICONS' /LOG=""${logfile}""" `
          -NoNewWindow `
          -RedirectStandardOutput $env:TEMP\stdout.txt `
          -RedirectStandardError $env:TEMP\stderr.txt `
          -Wait `
          -PassThru
        Write-Information "Installer exited with $proc.ExitCode." -InformationAction:Continue
        Write-Information "Installer exit code: $($proc.ExitCode.ToString())." -InformationAction:Continue
        Write-Information "STDOUT from the installer..." -InformationAction:Continue
        Get-Content -Path $env:TEMP\stdout.txt
        Write-Information "STDERR from the installer..." -InformationAction:Continue
        Get-Content -Path $env:TEMP\stderr.txt
        Remove-Item -Path $env:TEMP\stdout.txt
        Remove-Item -Path $env:TEMP\stderr.txt
        # List the top-level to really confirm that we were installed.
        Write-Information "Directories/files in ${{ inputs.directory }}..." -InformationAction:Continue
        Get-ChildItem ${{ inputs.directory }}
